Prepared/VBN statements/NNS //: parameterized/VBN queries/NNS are/VBP sufficient/JJ to/TO prevent/VB 1st/JJ order/NN injection/NN on/IN that/DT statement/NN ./.
If/IN you/PRP use/VBP un-checked/JJ dynamic/JJ sql/ACR anywhere/RB else/RB in/IN your/PRP$ application/NN you/PRP are/VBP still/RB vulnerable/JJ to/TO 2nd/JJ order/NN injection/NN ./.
2nd/JJ order/NN injection/NN means/VBZ data/NNS has/VBZ been/VBN cycled/VBN through/IN the/DT database/NN once/RB before/IN being/VBG included/VBN in/IN a/DT query/NN ,/, and/CC is/VBZ much/RB harder/JJR to/TO pull/VB off/RP ./.
AFAIK/NNP ,/, you/PRP almost/RB never/RB see/VBP real/JJ 2nd/JJ order/NN attacks/NNS ,/, as/IN it/PRP is/VBZ usually/RB easier/JJR for/IN attackers/NNS to/TO social-engineer/VB their/PRP$ way/NN in/IN ./.
You/PRP can/MD accomplish/VB a/DT 2nd/JJ order/NN injection/NN attack/NN when/WRB you/PRP can/MD cause/VB a/DT value/NN to/TO be/VB stored/VBN in/IN a/DT database/NN that/WDT is/VBZ later/RB used/VBN as/IN a/DT literal/JJ in/IN a/DT query/NN ./.
As/IN an/DT example/NN ,/, let/VB 's/POS say/VB you/PRP enter/VBP the/DT following/VBG information/NN as/IN your/PRP$ new/JJ username/NN when/WRB creating/VBG an/DT account/NN on/IN a/DT web/NN site/NN -LRB-/-LRB- assuming/VBG MySQL/ACR DB/ACR for/IN this/DT question/NN -RRB-/-RRB- :/COB '/COB +/COB -LRB-/COB SELECT/COB UserName/COB +/COB '_'/COB +/COB Password/COB FROM/COB Users/COB LIMIT/COB 1/COB -RRB-/COB +/COB '/COB If/IN there/EX are/VBP no/DT other/JJ restrictions/NNS on/IN the/DT username/NN ,/, a/DT prepared/JJ statement/NN would/MD still/RB make/VB sure/JJ that/IN the/DT above/JJ embedded/JJ query/NN does/VBZ n't/RB execute/VB at/IN the/DT time/NN of/IN insert/NN ,/, and/CC store/VBP the/DT value/NN correctly/RB in/IN the/DT database/NN ./.
However/RB ,/, imagine/VBP that/IN later/RB the/DT application/NN retrieves/VBZ your/PRP$ username/NN from/IN the/DT database/NN ,/, and/CC uses/VBZ string/NN concatenation/NN to/TO include/VB that/DT value/NN a/DT new/JJ query/NN ./.
You/PRP might/MD get/VB to/TO see/VB someone/NN else/RB 's/POS password/NN ./.
Since/IN the/DT first/JJ few/JJ names/NNS in/IN users/NNS table/NN tend/VBP to/TO be/VB admins/NNS ,/, you/PRP may/MD have/VB also/RB just/RB given/VBN away/RB the/DT farm/NN ./.
-LRB-/-LRB- Also/RB note/NN :/: this/DT is/VBZ one/CD more/JJR reason/NN not/RB to/TO store/VB passwords/NNS in/IN plain/JJ text/NN !/. -RRB-/-RRB-
We/PRP see/VBP ,/, then/RB ,/, that/WDT prepared/VBD statements/NNS are/VBP enough/RB for/IN a/DT single/JJ query/NN ,/, but/CC by/IN themselves/PRP they/PRP are/VBP not/RB sufficient/JJ to/TO protect/VB against/IN sql/ACR injection/NN attacks/NNS throughout/IN an/DT entire/JJ application/NN ,/, because/IN they/PRP lack/VBP a/DT mechanism/NN to/TO enforce/VB that/IN all/DT access/NN to/TO a/DT database/NN within/IN the/DT application/NN uses/VBZ safe/JJ code/NN ./.
However/RB ,/, used/VBN as/IN part/NN of/IN good/JJ application/NN design/NN --/: which/WDT may/MD include/VB practices/NNS such/JJ as/IN code/NN review/NN or/CC use/NN of/IN an/DT ORM/ACR ,/, data/NN layer/NN ,/, or/CC service/NN layer/NN that/WDT limits/VBZ dynamic/JJ sql/ACR --/: prepared/JJ statements/NNS are/VBP the/DT primary/JJ tool/NN for/IN solving/VBG the/DT Sql/ACR Injection/NN problem/NN ./.
If/IN you/PRP follow/VBP good/JJ application/NN design/NN principles/NNS ,/, such/JJ that/IN your/PRP$ data/NNS access/NN is/VBZ separated/VBN from/IN the/DT rest/NN of/IN your/PRP$ program/NN ,/, it/PRP becomes/VBZ easy/JJ to/TO enforce/VB or/CC audit/VB that/IN every/DT query/NN correctly/RB uses/VBZ parameterization/NN ./.
In/IN this/DT case/NN ,/, sql/ACR injection/NN -LRB-/-LRB- both/CC first/JJ and/CC second/JJ order/NN -RRB-/-RRB- is/VBZ completely/RB prevented/VBN ./.
Six/CD new/JJ votes/NNS today/NN ,/, almost/RB 5/CD years/NNS later/RB ./.
I/PRP 'd/MD really/RB love/VB to/TO be/VB able/JJ to/TO see/VB referrer/NN info/NN on/IN my/PRP$ answers/NNS ./.
