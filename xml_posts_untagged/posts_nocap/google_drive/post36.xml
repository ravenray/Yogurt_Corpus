<TEI>
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Is it safe to use $.support.cors = true; in jQuery?</title>
        <author>Abe Miessler</author>
      </titleStmt>
      <sourceDesc>
        <p> Pulled from StackOverflow: http://stackoverflow.com/questions/7852225/is-it-safe-to-use-support-cors-true-in-jquery</p>
      </sourceDesc>
    </fileDesc>
    <listPerson>
      <person xml:id="Abe Miessler" url="http://stackoverflow.com/users/226897/abe-miessler">
        <signatureContent>
          <p>Reputation: <num>41.9k</num>Number of Gold Badges: <num>38</num>Number of Silver Badges: <num>176</num>Number of Bronze Badges: <num>315</num></p>
        </signatureContent>
      </person>
      <person xml:id="rook" url="http://stackoverflow.com/users/183528/rook">
        <signatureContent>
          <p>Reputation: <num>40.7k</num>Number of Gold Badges: <num>24</num>Number of Silver Badges: <num>120</num>Number of Bronze Badges: <num>198</num></p>
        </signatureContent>
      </person>
      <person xml:id="bjornd" url="http://stackoverflow.com/users/367960/bjornd">
        <signatureContent>
          <p>Reputation: <num>14.3k</num>Number of Gold Badges: <num>3</num>Number of Silver Badges: <num>34</num>Number of Bronze Badges: <num>57</num></p>
        </signatureContent>
      </person>
      <person xml:id="Tim" url="http://stackoverflow.com/users/1061654/tim">
        <signatureContent>
          <p>Reputation: <num>310</num>Number of Gold Badges: <num>0</num>Number of Silver Badges: <num>1</num>Number of Bronze Badges: <num>7</num></p>
        </signatureContent>
      </person>
    </listPerson>
  </teiHeader>
  <text>
    <body>
      <div type="forum">
        <post when="2011-10-21 16:10:59Z" who="Abe Miessler" revisedWhen="2011-10-21 16:19:04Z" upVote="51" accepted="favorite"><p>I was trying to hit a web service on a different domain using jQuery's ajax method. After doing some research it looks like it does not allow this is by design to prevent cross site scripting.

I came across a work around which was to include this line:

$.support.cors = true;

at the top of my javascript code. From what I understand this enables cross site scripting in jQuery.

Does having this line of code make my site more vulnerable to attack? I've always heard XSS discussed as a security issue, are there legitimate uses for XSS?
<tag>jquery</tag><tag>security</tag><tag>xss</tag></p></post>
      </div> 
        <div type="response">
        <post who= "Pekka" when="2011-10-21 16:15:43Z" indentLevel="1">
          <p>Background: api.jquery.com/jQuery.support I don't think that setting enables anything though. It just tells jQuery what is supported </p>
        </post>
      </div>
        <div type="response">
        <post who="Álvaro González" when="2011-10-21 16:19:50Z" indentLevel="1">
          <p>@Pekka - The very document you link says exactly the opposite.</p>
        </post>
      </div>
        <div type="response">
        <post who="Pekka" when="2011-10-21 16:21:14Z" indentLevel="1">
          <p>@Alvaro you don't enable CORS by setting that variable. You just tell jQuery that you're in an environment where Cross-Domain XHR requests are possible. (So, granted, you enable their use in jQuery, fair enough.)</p>
        </post>
      </div>
      <div type="answer">
        <post who="rook" when="2011-10-23 19:58:12Z" upVote="33" accepted="accepted">
          <p>XSS is not a feature that can be enabled in jQuery.  It would be very  very  unusual if the jQuery core had an XSS vulnerability, but it is possible and its called  DOM-based XSS .   "Cross-Origin Resource Sharing" or CORS isn't the same as XSS,  BUT ,  but if a web application had an XSS vulnerability, then an attacker would have CORS-like access to all resources on that domain.   In short, CORS gives you control over how you break the  same origin policy  such that you don't need to introduce a full on XSS vulnerability.   The  $.support.cors  query feature relies upon the  Access-Control-Allow-Origin  HTTP response header.  This  could be  a vulnerability. For example, if a web application had  Access-Control-Allow-Origin: *  on every page, then an attacker would have the same level of access as an XSS vulenrablity.   Be careful what pages you introduce CORS headers,  and try and avoid  *  as much as possible.  So to answer your question:   NO  a web application never needs to introduce an XSS vulnerability because there are way around the SOP such as CORS/jsonp/cross domain proxies/ access-control-origin .  </p>
        </post>
      </div>
      <div type="response">
        <post who="Jason Sebring" when="2012-11-15 23:32:11Z" indentLevel="1">
          <p>If you have a simple GET that you want to enable only and you have subdomains across a website, then how do you have the default :visited style behavior work in a link. You don't given your philosophy.</p>
        </post>
      </div>
      <div type="response">
        <post who="rook" when="2012-11-16 01:51:35Z" indentLevel="1">
          <p>@kitgui.com  i have no idea what you are asking or what it has to do with security.</p>
        </post>
      </div>
      <div type="response">
        <post who="Jason Sebring" when="2012-11-17 16:18:01Z" indentLevel="1">
          <p>there is no ? at the end.</p>
        </post>
      </div>
      <div type="response">
        <post who="netalex" when="2014-02-23 16:27:54Z" indentLevel="1">
          <p>in phonegap for android, access control origin is normally set to "*", but on a mobile that's expected. you mean that this is a issue?</p>
        </post>
      </div>
      <div type="response">
        <post who="rook" when="2015-03-10 16:43:15Z" indentLevel="1">
          <p>CORS is always server-side. Android has its own ways of violating the SOP for it's browser apps. This is really a different question,  but the rational here is that by installing the app, the user has granted permission to a browser app to run independently from the SOP,  which would be true for an app written in Java.</p>
        </post>
      </div>
      <div type="answer">
        <post who="bjornd" when="2011-10-21 16:23:40Z" upVote="11">
          <p>It can help only if you have CORS enabled in your browser but it isn't supported by jQuery yet:

    To enable cross-domain requests in environments that do not support cors yet but do allow cross-domain XHR requests (windows gadget, etc), set $.support.cors = true;. CORS WD

Just setting this property to true can't cause security vulnerability.
</p>
        </post>
      </div>
      <div type="answer">
        <post who="Tim" when="2013-09-30 13:29:00Z" upVote="2">
          <p>When a hacker is able to inject script code to change the requests to another domain, he is also able to set this javascript flag in the script. So wether this flag is set doesn't change much at this point of the intrusion.</p>
        </post>
      </div>
      <div type="response">
        <post who="jpaugh" when="2015-12-02 15:29:07Z" indentLevel="1">
          <p>This really doesn't answer the question. At the point of intrusion, all bets are off; but the idea is to prevent that from happening.</p>
        </post>
      </div>
    </body>
  </text>
</TEI>
