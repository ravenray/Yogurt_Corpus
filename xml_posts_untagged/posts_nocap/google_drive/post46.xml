<TEI>
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Fixing XSS vulnerability in ASP.NET</title>
        <author>Gezim</author>
      </titleStmt>
      <sourceDesc>
        <p> Pulled from StackOverflow: http://stackoverflow.com/questions/26637439/fixing-xss-vulnerability-in-asp-net</p>
      </sourceDesc>
    </fileDesc>
    <listPerson>
      <person xml:id="Gezim" url="http://stackoverflow.com/users/32495/gezim">
        <signatureContent>
          <p>Reputation: <num>2,596</num>Number of Gold Badges: <num>6</num>Number of Silver Badges: <num>28</num>Number of Bronze Badges: <num>56</num></p>
        </signatureContent>
      </person>
      <person xml:id="SilverlightFox" url="http://stackoverflow.com/users/413180/silverlightfox">
        <signatureContent>
          <p>Reputation: <num>12.9k</num>Number of Gold Badges: <num>4</num>Number of Silver Badges: <num>25</num>Number of Bronze Badges: <num>57</num></p>
        </signatureContent>
      </person>
    </listPerson>
  </teiHeader>
  <text>
    <body>
      <div type="forum">
        <post when="2014-10-29 17:54:59Z" who="Gezim" revisedWhen="2014-10-30 21:07:17Z" upVote="0" accepted="favorite"><p>In my Page_Load method for an ASP.NET page, I have this:
          BtnUploadDocument.Attributes.Add("onclick",
                String.Format("Javascript:var PopUpWin = window.open('{0}','_blank','scrollbars=yes, title=yes,toolbar=no,location=no,resizable=yes,status=no');return false;",
              SQLManager.GetUploadDocumentLink(poid, pono)))
            );
        How do I ensure that this is not vulnerable to an XSS attack?<tag>asp.net</tag><tag>xss</tag><tag>security</tag></p></post>
      </div>
      <div type="response">
        <post who="Chris Marisic" when="2014-10-29 21:48:35Z" indentLevel="1">
          <p>Stop using pop ups every single person in the world hates them.</p>
        </post>
      </div>
      <div type="response">
        <post who="guildsbounty" when="2014-10-14 18:05:35Z" indentLevel="1">
          <p>XSS attacks are generated by user input through the URL, or by toying with a POST object. If 'GetUploadDocumentLink' doesn't ever look at something passed in via the Request object, then as long as GetUploadDocumentLink only retrieves data that is not provided by the user, it should be reasonably safe. Obviously, a user could use a Developer Tool to alter the results after they are loaded to the screen, but that's a different matter</p>
        </post>
      </div>
      <div type="response">
        <post who="Gezim" when="2014-10-29 18:06:35Z" indentLevel="1" upVote="2">
          <p>@ChrisMarisic, I think you're rounding up and this adds nothing to my question.</p>
        </post>
      </div>
      <div type="response">
        <post who="Gezim" when="2014-10-29 18:07:35Z" indentLevel="1">
          <p>@guildsbounty, I should have clarified that GetUploadDocumentLink definitely returns results that were input by user at one point. So can't rely on that being safe.</p>
        </post>
      </div>
      <div type="response">
        <post who="guildsbounty" when="2014-10-29 18:10:35Z" indentLevel="1">
          <p>Could you post details of how that information is stored? Because you would want to intercept XSS-dangerous data before it is stored into your DB, not on retrieval of it from the DB. Ultimately, I'd suggest validating the data as it is input to ensure that it is a pure URL that doesn't contain a certain selection of characters, or the characters are safely URL-encoded.</p>
        </post>
      </div>
      <div type="response">
        <post who="guildsbounty" when="2014-10-29 18:16:35Z" indentLevel="1">
          <p>Just to clarify, the 'characters' you generally need to worry about being in a URL are single quotes, double quotes, and, in unusual cases, semi-colons. You can either URL-escape those characters, or simply ban them from being in the url string altogether. Now, what happens on the receiving end of that URL is on the head of the person who controls that link..</p>
        </post>
      </div>
      <div type="answer">
        <post who="SilverlightFox" when="2014-10-30 17:43:21Z" upVote="0">
        <p>If you follow the OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet, the rule JavaScript Escape Before Inserting Untrusted Data into JavaScript Data Values applies here.

        This is defined as:

        Except for alphanumeric characters, escape all characters less than 256 with the \xHH format to prevent switching out of the data value into the script context or into another attribute
        so you will need to JSEncode using a function. Note you should adapt this to follow the OWASP recommendation and encode all non alphanumerics otherwise there will be ways for an attacker to break out and cause XSS.

        Your code will then become:

        BtnUploadDocument.Attributes.Add("onclick",
                      String.Format("Javascript:var PopUpWin = window.open('{0}','_blank','scrollbars=yes, title=yes,toolbar=no,location=no,resizable=yes,status=no');return false;",
                    JSEncode.EncodeJsString(SQLManager.GetUploadDocumentLink(poid, pono))))
            );</p>
        </post>
      </div>
    </body>
  </text>
</TEI>
